/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paquete_principal;

import java.awt.Color;
import java.util.Random;
import java.util.Scanner;
import javax.swing.table.DefaultTableModel;
import java.util.*;
import java.util.concurrent.ThreadLocalRandom;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import listacircular.Nodo;

/**
 *
 * @author Lopez
 */
public class principal extends javax.swing.JFrame implements Runnable {

    // proceso para crear una lista
    int bloque = 0;
    int posI = 0, posF = 0, tamañobloque;
    ArrayList<Nodo> lista;
    int tamaño_lista;
    String hora, minutos, segundos, ampm;
    Calendar calendario;
    Thread h1;
    DefaultTableModel modelo;
    String[] datos = new String[31];
    private int contadorNombre = 0;
    String[] procesos = new String[16]; //como solo hasta 16 procesos podemos tener
    Stack<Procesos> Procesos = new Stack();//aqui almaceno mis procesos
    boolean[] procesosTabla = {false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false};
    private JTable tabla;
    private int insertar = 0;//si es 1 es porque hay datos que agregar a la tabla o eliminar
    private int contadorDeListaProcesos = -1;//sirve para ver que proceso estamos viendo
    int tiempo_llegada;

    /**
     * Creates new form principal
     */
    public principal() {
        initComponents();
        mostrardatos();
        h1 = new Thread(this);
        h1.start();
        tamaño_lista = 0;
        lista = new ArrayList<Nodo>();

    }

    public void mostrardatos() {
        verificarProcesos hilo = new verificarProcesos();
        hilo.start();
    }

    public String Hexadecimales(int decimal) {
        Scanner teclado = new Scanner(System.in);
        teclado.close();
        char digitosH[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        String hexadecimal2 = "";
        int resto, aux = decimal;

        //for (int i = decimal - 1; i >= 0; i--) {
        while (aux > 0) {
            resto = aux % 16;
            hexadecimal2 = digitosH[resto] + hexadecimal2;
            aux /= 16;
        }
        System.out.printf("%n%nMétodo 2 -> Decimal: %d, Hexadecimal: %sh", decimal, hexadecimal2, "h");
        return hexadecimal2 + "h";
        /* System.out.printf("%n%nMétodo 2 -> Decimal: %d, Hexadecimal: %s", i + 1, hexadecimal2);
            hexadecimal2 = "";
            aux = i;
        }*/
    }
    double duracion2 = ThreadLocalRandom.current().nextInt(5, 15 + 1);//Genera numeros entre 5 y 15

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablita = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        agregar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        bloques = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        DirH = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblReloj = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        mitablita = new javax.swing.JTable();
        color = new javax.swing.JPanel();
        as = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tablita = new javax.swing.JTable(){
            public boolean isCellEditable(int ro,int col ){
                return false;
            }
        };
        tablita.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        tablita.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tamaño", "No.", "Documento", "Estado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Byte.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablita.setFocusable(false);
        tablita.setGridColor(new java.awt.Color(255, 255, 255));
        tablita.getTableHeader().setResizingAllowed(false);
        tablita.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tablita);

        jLabel1.setText("Bloques a ocupar del proceso");

        agregar.setText("agregar");
        agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarActionPerformed(evt);
            }
        });

        jLabel2.setText("Agregar proceso");

        jLabel3.setText("Direccion de Memoria:");

        DirH.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        DirH.setText("0");

        jLabel4.setText("Direccion de memoria ejecutandose: ");

        jLabel5.setText("D");

        lblReloj.setText("HORA");

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        mitablita.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "Nombre", "Tamaño", "Tiempo L", "Duracion", "Estado"
            }
        ));
        jScrollPane2.setViewportView(mitablita);

        as.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout colorLayout = new javax.swing.GroupLayout(color);
        color.setLayout(colorLayout);
        colorLayout.setHorizontalGroup(
            colorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(as, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
        );
        colorLayout.setVerticalGroup(
            colorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, colorLayout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(as, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(color, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(184, 184, 184)
                                .addComponent(lblReloj)
                                .addGap(227, 227, 227))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(130, 130, 130))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(DirH))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel5)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bloques, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(113, 113, 113)
                                .addComponent(agregar)))
                        .addContainerGap(309, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(243, 243, 243)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 549, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(366, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(agregar)
                                .addGap(70, 70, 70)
                                .addComponent(bloques, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(lblReloj))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(118, 118, 118)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(108, 108, 108))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jButton1))
                                        .addGap(131, 131, 131))))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3)
                                .addComponent(DirH))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(color, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(3, 3, 3)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    int posiproceso;

    // mi clase hilo algoritmo completo
    public class mihilo extends Thread {

        int posiciontabla = 0;
        int contadorprogres = 0;

        @Override
        public void run() {
            while (tamaño_lista > 0) {
                int cont = 0;
                Iterator<Nodo> itrNodo = lista.iterator();
                while (itrNodo.hasNext()) {
                    Nodo listado = itrNodo.next();
                    System.out.println("posciones de tabla " + posiciontabla);
                    if (listado.getDuracion() <= 10) {
                        int posiproceso = (int) (mitablita.getValueAt(listado.getPosi(), 0));
                        System.out.println("proce eliminado : " + listado.getNombre() + " cantidad " + listado.getDuracion());
                        for (int i = (int) listado.getDuracion(); i >= 0; i--) {
                            if (i == 0) {
                                try {
                                    mitablita.setValueAt("Termindo", posiproceso, 5);
                                    color.setBackground(Color.RED);
                                    as.setText(listado.getNombre());
                                    mitablita.setValueAt(0, posiproceso, 4);
                                    Thread.sleep(100);
                                } catch (InterruptedException ex) {
                                    Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            } else {
                                try {
                                    System.out.println("Ejecutando......" + i);
//                                    pruebas.setText(listado.getDuracion() + "Ejecutando1........ " + i);
                                    color.setBackground(Color.GREEN);
                                    as.setText(listado.getNombre());
                                    System.out.println(posiproceso + " prestar atecion aquiiiiiiiiiiiiiiiiiiiiiii");
                                    mitablita.setValueAt(i, posiproceso, 4);
                                    mitablita.setValueAt("Ejecutando... ", posiproceso, 5);
                                    Thread.sleep(100);
                                } catch (InterruptedException ex) {
                                    Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }
                        itrNodo.remove();
                        tamaño_lista--;
                    } else if (listado.getDuracion() > 10) {
                        System.out.println(listado.getDuracion() + "atencion ---------------------------------------------");
                        int posiproceso = (int) (mitablita.getValueAt(listado.getPosi(), 0));
//                        pruebas.setText("proce desconetar : " + listado.getNombre() + " cantidad Inicial " + listado.getDuracion());
                        for (int i = (int) listado.getDuracion(); i > listado.getDuracion() - 10; i--) {
                            try {
//                                pruebas.setText(listado.getDuracion() + " Ejecutando2........ " + i);
                                color.setBackground(Color.GREEN);
                                as.setText(listado.getNombre());
                                System.out.println(posiproceso + " prestar atecion aquiiiiiiiiiiiiiiiiiiiiiii");
                                mitablita.setValueAt(i, posiproceso, 4);
                                mitablita.setValueAt("Ejecutando.... ", posiproceso, 5);
                                Thread.sleep(100);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        double duracio = (listado.getDuracion() - 10);
                        System.out.println("estrando al 2do");
//                        pruebas.setText("Listo........ ");
                        color.setBackground(Color.YELLOW);
                        as.setText(listado.getNombre());
                        mitablita.setValueAt("Listo ... ", posiproceso, 5);
                        listado.setDuracion(duracio);
                    }
                }
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            agregar.setEnabled(true);
            as.setText("");
            color.setBackground(Color.WHITE);
            DefaultTableModel modelo = (DefaultTableModel) mitablita.getModel();
            int numDatos = modelo.getRowCount();
            for (int i = 0; i < numDatos; i++) {
                modelo.removeRow(0);
            }
            DefaultTableModel modelo2 = (DefaultTableModel) tablita.getModel();
            int numDatos2 = modelo2.getRowCount();
            for (int i = 0; i < numDatos2; i++) {
                modelo2.removeRow(0);
            }
            boolean[] x = {false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false};
            procesosTabla=x;
        }
    }

    public void datotabla(int posicion, String nombre, int tamaño, int tiempolle, int duracion, String estado) {
        DefaultTableModel modelo = (DefaultTableModel) mitablita.getModel();
        Object[] fila = new Object[6];
        fila[0] = posicion;
        fila[1] = nombre;
        fila[2] = tamaño;
        fila[3] = tiempolle;
        fila[4] = duracion;
        fila[5] = estado;
        modelo.addRow(fila);
        mitablita.setModel(modelo);

    }

    // metodos de la lista
    public void insertar(String nombre, int tamanio, int tiempo_llegada, int duracion) {
//        int posi,String nombre,int tamanio, double tiempo_llegada,double duracion
        lista.add(new Nodo(tamaño_lista, nombre, tamanio, tiempo_llegada, duracion));
        datotabla(tamaño_lista, nombre, tamanio, tiempo_llegada, duracion, "Listo");
        tamaño_lista++;
    }

    public void mostra() {
        Iterator<Nodo> itrPartidos = lista.iterator();
        while (itrPartidos.hasNext()) {
            Nodo partido = itrPartidos.next();
            System.out.println(partido.getNombre() + " - "
                    + partido.getDuracion() + ""
            );
        }
    }

    public void eliminar(int pos) {
        Iterator<Nodo> itrnodo = lista.iterator();
        while (itrnodo.hasNext()) {
            Nodo listado = itrnodo.next();
            if (listado.getPosi() == pos) {
                System.out.println("encontrado " + listado.getPosi());
                lista.remove(pos);
            }
        }
    }

    public Nodo existe(int pos) {
        Nodo x = null;
        Iterator<Nodo> itrnodo = lista.iterator();
        while (itrnodo.hasNext()) {
            Nodo listado = itrnodo.next();
            if (listado.getPosi() == pos) {
                System.out.println("encontrado " + listado.getPosi());
                x = listado;
            }
        }
        return x;
    }


    private void agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarActionPerformed
        Random rand = new Random();
        tiempo_llegada = Integer.parseInt(segundos);
        int randInt = rand.nextInt(63); //Genera numeros de 0 a 65535 que es nuestro espacio disponible
        bloques.setText("");
        Procesos procesoAux = new Procesos("aux", 0, 0, 0, 0);//ignorarlo solo lo uso para usar una funcion
        int guiaParaAsignarEspacios = procesoAux.saberBloquesAUtilizar(randInt);//me indica cuantos bloques de memoria debo buscar
        bloque = guiaParaAsignarEspacios;
        boolean asignar = true;
        int contador = 0;
        int PosA = 0;
        int PosB = 0;

        for (int i = 0; i < 16; i++) {
            if (contador != guiaParaAsignarEspacios) {
                System.out.println("contador es " + contador);
                if (procesosTabla[i] == false) {//hay espacio libre para asignar
                    if (contador == 0) {//sera la posicion inicial del documento
                        PosA = i;
                        System.out.println("La posicion inicial es " + PosA);

                    }
                    if (contador == guiaParaAsignarEspacios - 1) {
                        PosB = i;
                        //Direccion en decimales 2^n-1
                        double Dir = (int) Math.pow(2, PosB);
                        int Total = (int) (Dir - 1);
                        DirH.setText(String.valueOf(Total));
                        System.out.println("La posicion final es " + PosB);
                    }
                    procesosTabla[i] = true;//esto significa que esos espacios de la memoria estan llenos
                    contador++;

                } else {//encontro espacios asignados
                    contador = 0;
                }
                System.out.println("Voy en i " + i + "  " + procesosTabla[i]);
            }
        }
        if (PosB != 0) {//significa que encontro posiciones libres
            Procesos process = new Procesos("P" + this.contadorNombre, randInt, PosA, PosB, 10);
            this.contadorNombre++;
//            System.out.println("tam "+ randInt+ " nombre " + process.getNombre()+" tiempollegada "+tiempo_llegada+" duracion "+ duracion2);
            //Se agreaga a la lista circular
            int duracion_limite = (int) (Math.random() * (16 - 5)) + 5;
            insertar(process.getNombre(), process.getBloques(), tiempo_llegada, duracion_limite);
            System.out.println("agregando datos ......................");
            jLabel5.setText(String.valueOf(randInt));
            bloques.setText(String.valueOf(process.getBloques()));
            Procesos.add(process);//voy añadiendo los procesos conforme le van dando click
            insertar++;
            contadorDeListaProcesos++;//aqui podriamos cambiar y mandarle otro numero
            posI = PosA;
            posF = PosB;
            System.out.println("posI" + posI);
            System.out.println("posF" + posF);
        } else {
            JOptionPane.showMessageDialog(null, "Memoria llena, el proceso ocupaba " + guiaParaAsignarEspacios);
        }

    }//GEN-LAST:event_agregarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        agregar.setEnabled(false);
        mihilo hilo = new mihilo();
        hilo.start();
    }//GEN-LAST:event_jButton1ActionPerformed

    @Override
    public void run() {
        Thread ct = Thread.currentThread();
        while (ct == h1) {
            calcula();
            lblReloj.setText(hora + ":" + minutos + ":" + segundos + " " + ampm);
            try {
                Thread.sleep(1000);

            } catch (InterruptedException ex) {
                Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void calcula() {
        Calendar calendario = new GregorianCalendar();
        Date fechaHoraActual = new Date();

        calendario.setTime(fechaHoraActual);
        ampm = calendario.get(Calendar.AM_PM) == Calendar.AM ? "AM" : "PM";
        if (ampm.equals("PM")) {
            int h = calendario.get(Calendar.HOUR_OF_DAY) - 12;
            hora = h > 9 ? "" + h : "0" + h;

        } else {
            hora = calendario.get(Calendar.HOUR_OF_DAY) > 9 ? "" + calendario.get(Calendar.HOUR_OF_DAY) : "0" + calendario.get(Calendar.HOUR_OF_DAY);
        }
        minutos = calendario.get(Calendar.MINUTE) > 9 ? "" + calendario.get(Calendar.MINUTE) : "0" + calendario.get(Calendar.MINUTE);
        segundos = calendario.get(Calendar.SECOND) > 9 ? "" + calendario.get(Calendar.SECOND) : "0" + calendario.get(Calendar.SECOND);
    }

    public void settamanioBloques(int cantbloque) {
        /* if (cantbloque == 0) {
            JOptionPane.showMessageDialog(null, "No tiene tamaño");
        } else*/ if (cantbloque > 16) {
            JOptionPane.showMessageDialog(null, "Supera nuestra capacidad para almacenar");
        } else {
            this.tamañobloque = (int) Math.pow(2, cantbloque) - 1;
            System.out.println("Capacidad" + tamañobloque);
        }
    }

    public class verificarProcesos extends Thread {//sirve para ver si se dibuja o no 

        DefaultTableModel tables = new DefaultTableModel();

        public verificarProcesos() {
            tables.addColumn("Tam");
            tables.addColumn("No.");
            tables.addColumn("Documento");
            tables.addColumn("Estado");
        }

        @Override
        public void run() {//aqui dibujaremos
            while (true) {
                System.out.println("toca insertar?" + insertar);
                System.out.println(Procesos.size());
                if (insertar == 1) {//hay procesos que meter en nuestro sistema
                    String tamaño;
                    String[] datos = new String[4];
                    //int bloque = Procesos.get(contadorDeListaProcesos).getBloques();
                    //System.out.println("bloque" + bloque);
                    int bloqueAnterior = tablita.getRowCount();
                    if (Procesos.get(contadorDeListaProcesos).getBloques() != 0) {
                        System.out.println("Dibujar");
                        if (Procesos.get(contadorDeListaProcesos).getBloques() == 1) {
                            if (bloqueAnterior > 0) {
                                System.out.println("simon");
                                System.out.println(bloque);
                                System.out.println("bloqueAnterior****" + bloqueAnterior);

                                settamanioBloques(bloqueAnterior+1);
                                tamaño = Hexadecimales(tamañobloque);
                            } else {
                                System.out.println("también");
                                settamanioBloques(bloque);
                                tamaño = Hexadecimales(tamañobloque);
                            }
                            datos[0] = tamaño;
                        } else if (Procesos.get(contadorDeListaProcesos).getBloques() == bloque) {
                            System.out.println("si entra");
                            if (bloqueAnterior/*Ve  las filas totales ocupadas*/ > 0) {
                                settamanioBloques(1 + bloqueAnterior);// bloque disponible
                                tamaño = Hexadecimales(tamañobloque);
                                System.out.println("bloqueAnterior----" + bloqueAnterior);
                                System.out.println("TAMAÑO" + tamañobloque);
                                System.out.println("tamañoooo" + tamaño);
                                System.out.println("HAY BLOQUE ANTERIOR");
                            } else {
                                System.out.println("kpex");
                                settamanioBloques(0);
                                tamaño = Hexadecimales(tamañobloque);
                                System.out.println("tamaño" + tamañobloque);
                                System.out.println("NO HAY ");
                            }
                            datos[0] = tamaño;
                        }
                        //System.out.println(Procesos.get(0).getBloques());
                        //1 ultimo bloque 
                        //getBloque total de bloques 
                        //posB pos final 1-6
                        //posA inicial 
                        //4 datos posibles necesitamos
                        //datos[0] = " ";
                        datos[1] = " ";
                        datos[2] = " ";
                        datos[3] = " ";
                        /*int suma= Procesos.get(contadorDeListaProcesos).getBloques() + bloqueAnterior;
                        if (Procesos.get(contadorDeListaProcesos).getBloques() + bloqueAnterior == posF + 1) {
                            datos[0] = "fin";
                            System.out.println("bloque Ant"+bloqueAnterior);
                            System.out.println("Aqui"+Procesos.get(contadorDeListaProcesos).getBloques());
                            System.out.println("suma "+ suma);
                        }
                        if (Procesos.get(contadorDeListaProcesos).getBloques() + bloqueAnterior == posI + 1) {
                            datos[0] = "inicio";
                            
                        }*/

                        tables.addRow(datos);
                        Procesos.get(contadorDeListaProcesos).setBloques(Procesos.get(contadorDeListaProcesos).getBloques() - 1);
                    } else {
                        insertar = 0;//dejo de insertar
                    }
                    tablita.setModel(tables);

                }
                try {
                    Thread.sleep(1000);//revisaremos a cada cierto tiempo
                } catch (InterruptedException ex) {
                    System.out.println("Error en el hilo de dibujo");
                }
            }
        }

    }

    //pasar la direccion a Hexadecimal
    public String DireccionHexadecimal(int decimal) {
        Scanner teclado = new Scanner(System.in);
        teclado.close();
        char digitosH[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        String hexadecimal2 = "";
        int resto, aux = decimal;
        while (aux > 0) {
            resto = aux % 16;
            hexadecimal2 = digitosH[resto] + hexadecimal2;
            aux /= 16;
        }
        return hexadecimal2 + "h";
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel DirH;
    private javax.swing.JButton agregar;
    private javax.swing.JLabel as;
    private javax.swing.JLabel bloques;
    private javax.swing.JPanel color;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblReloj;
    private javax.swing.JTable mitablita;
    private javax.swing.JTable tablita;
    // End of variables declaration//GEN-END:variables
}
