/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paquete_principal;

import java.awt.Color;
import java.awt.Font;
import java.util.Random;
import java.util.Scanner;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Lopez
 */
public class principal extends javax.swing.JFrame {
    DefaultTableModel modelo;
    String []datos=new String [31];
    private int contadorNombre = 0;
    String [] procesos = new String[16]; //como solo hasta 16 procesos podemos tener
    Stack <Procesos>Procesos = new Stack();//aqui almaceno mis procesos
    boolean [] procesosTabla = {false,false, false, false, false, false, false,false, false, false, false, false};
    /**
     * Creates new form principal
     */
    public principal() {
        initComponents();
        mostrardatos();
    }
        public void mostrardatos(){
      /* tablita.getTableHeader().setFont(new Font("Arial", 1, 13));
        // cambia el fondo del encabezado de la tabla
        tablita.getTableHeader().setBackground(Color.WHITE);
        // cambia el color de la letra del encabezado de la tabla
        tablita.getTableHeader().setForeground(Color.BLACK);
        modelo= new DefaultTableModel();
        DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
        modelo.addColumn("No.");
        modelo.addColumn("[ ]");
        modelo.addColumn("Lista");
        tablita.setModel(modelo);*/
        
//        String anuncio="dato",lista="si";
//        HiloTamanio tamanio=new HiloTamanio();
//        HiloTamanio algo = new HiloTamanio();
////        int bloque = (int) (Math.random() * 16) + 1;// La cantidad de bloques que se desea ocupar
////            System.out.println("El bloque "+bloque);
//        //tamanio.settamanioBloques(bloque);
//        int espaciolibre=tamanio.getEspaciolibre();// dice cuanto espacio libre tiene la memoria
//            System.out.println("la memoria tiene "+ espaciolibre+ " bloques libres");
//        tamanio.setBloqueAnterior(0);// Se envia el numero (1-16) de bloques ya ocupados
//        tamanio.setBloque(3);// se manda el tamaño de bloques que ocupa el nuevo documento 
//        tamanio.setTabla(tablita);
//        tamanio.activo=true;
//        tamanio.start();
//        
////        int espaciolibre2=tamanio.getEspaciolibre();// dice cuanto espacio libre tiene la memoria
////            System.out.println("la memoria tiene "+ espaciolibre2+ " bloques libres");
////        int guadalupe = 16 - espaciolibre2;
////        algo.setBloqueAnterior(guadalupe);// Se envia el numero (1-16) de bloques ya ocupados
////        algo.setBloque(3);// se manda el tamaño de bloques que ocupa el nuevo documento 
////        algo.setTabla(tablita);
////        algo.activo=true;
////        algo.start();
//        
//        
//        boolean ver=tamanio.isLlena();// retorna un booleano , si es true la memoria ya esta llena si es false aún hay espacio
//        System.out.println("La memoria "+ ver + " llena");

//        DibujandoProcesos hilo = new DibujandoProcesos();//este hilo comprueba si se debe agregar o eliminar procesos
//        hilo.start();
          verificarProcesos hilo = new verificarProcesos();
          hilo.start();
          DibujandoProcesos tables = new DibujandoProcesos();
          tables.start();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablita = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        agregar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        bloques = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tablita = new javax.swing.JTable(){
            public boolean isCellEditable(int ro,int col ){
                return false;
            }
        };
        tablita.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        tablita.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tamaño", "No.", "Documento", "Estado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablita.setFocusable(false);
        tablita.setGridColor(new java.awt.Color(255, 255, 255));
        tablita.getTableHeader().setResizingAllowed(false);
        tablita.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tablita);

        jLabel1.setText("Bloques a ocupar del proceso");

        agregar.setText("agregar");
        agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarActionPerformed(evt);
            }
        });

        jLabel2.setText("Agregar proceso");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(328, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bloques, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(agregar)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(126, 126, 126))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(agregar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bloques, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(86, 86, 86))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarActionPerformed
        Random rand = new Random();
        int randInt = rand.nextInt(127); //Genera numeros de 0 a 65535 que es nuestro espacio disponible
        bloques.setText("");
        Procesos procesoAux = new Procesos("aux", 0, 0,0,0);//ignorarlo solo lo uso para usar una funcion
        int guiaParaAsignarEspacios = procesoAux.saberBloquesAUtilizar(randInt);//me indica cuantos bloques de memoria debo buscar
        boolean asignar = true;
        int contador = 0;
        int PosA = 0;
        int PosB = 0;
        for(int i = 0; i<12; i++){
            if(contador != guiaParaAsignarEspacios){
                System.out.println("contador es " + contador);
                if(procesosTabla[i] == false){//hay espacio libre para asignar
                    if(contador == 0){//sera la posicion inicial del documento
                       PosA = i;
                       System.out.println("La posicion inicial es " + PosA);
                    }
                    if(contador == guiaParaAsignarEspacios-1){
                        PosB = i;
                        System.out.println("La posicion final es " + PosB);
                    }
                    procesosTabla[i] = true;//esto significa que esos espacios de la memoria estan llenos
                    contador++;
                }else{//encontro espacios asignados
                    contador = 0;
                }
                System.out.println("Voy en i "+i+"  "+procesosTabla[i]);
            }     
        }
        Procesos process = new Procesos("P"+this.contadorNombre, randInt,1,2,10);
        this.contadorNombre++;
        System.out.println("tam "+ randInt+ " nombre " + process.getNombre());
        bloques.setText(String.valueOf(process.getBloques()));
        Procesos.add(process);//voy añadiendo los procesos conforme le van dando click
        System.out.println(Procesos.get(Procesos.size()-1).getNombre());
    }//GEN-LAST:event_agregarActionPerformed

    public class verificarProcesos extends Thread{//sirve para ver si se dibuja o no 
  
        @Override
        public void run(){
            while(true){
                System.out.println(Procesos.size());
                if(Procesos.size() > 0){//hay procesos que meter en nuestro sistema
                    System.out.println("Dibujar");
                }
                try {
                    Thread.sleep(100);//revisaremos a cada cierto tiempo
                } catch (InterruptedException ex) {
                  System.out.println("Error en el hilo de dibujo");
                }
            }
        }
}

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregar;
    private javax.swing.JLabel bloques;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablita;
    // End of variables declaration//GEN-END:variables
}
