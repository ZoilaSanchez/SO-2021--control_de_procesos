/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paquete_principal;

import java.awt.Color;
import java.util.Random;
import java.util.Scanner;
import javax.swing.table.DefaultTableModel;
import java.util.*;
import java.util.concurrent.ThreadLocalRandom;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import listacircular.Nodo;

/**
 *
 * @author Lopez
 */
public class principal extends javax.swing.JFrame implements Runnable {

    // proceso para crear una lista
    int bloque = 0;
    int posI = 0, posF = 0, tamañobloque;
    int Dire = 0;
    ArrayList<Nodo> lista;
    int tamaño_lista;
    String hora, minutos, segundos, ampm;
    Calendar calendario;
    Thread h1;
    DefaultTableModel modelo;
    String[] datos = new String[31];
    private int contadorNombre = 0;
    String[] procesos = new String[16]; //como solo hasta 16 procesos podemos tener
    Stack<Procesos> Procesos = new Stack();//aqui almaceno mis procesos
    boolean[] procesosTabla = {false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false};
    private JTable tabla;
    private int insertar = 0;//si es 1 es porque hay datos que agregar a la tabla o eliminar
    private int contadorDeListaProcesos = -1;//sirve para ver que proceso estamos viendo
    int tiempo_llegada;

    /**
     * Creates new form principal
     */
    public principal() {
        initComponents();
        mostrardatos();
        h1 = new Thread(this);
        h1.start();
        tamaño_lista = 0;
        lista = new ArrayList<Nodo>();
        correr.setEnabled(false);
        jScrollPane1.setOpaque(false);
        jScrollPane1.getViewport().setOpaque(false);
        mitablita.setShowGrid(false);
        mitablita.setOpaque(false);
        jScrollPane2.setOpaque(false);
        jScrollPane2.getViewport().setOpaque(false);
        tablita.setShowGrid(false);
        tablita.setOpaque(false);

        color.setOpaque(false);
        txttemp.setOpaque(false);
        txttemp.setBackground(new Color(0, 0, 0, 0));
        jScrollPane3.getViewport().setBackground(new Color(0, 0, 0, 0));
        jScrollPane3.getViewport().setOpaque(false);
        jScrollPane3.setOpaque(false);
        SO.setBackground(Color.ORANGE);
        as1.setText("SISTEMA OPERATIVO");
        this.setLocationRelativeTo(this);
        agregar.setBackground(new Color(0, 0, 0, 0));
        correr.setBackground(new Color(0, 0, 0, 0));
    }

    public void mostrardatos() {
        verificarProcesos hilo = new verificarProcesos();
        hilo.start();
    }

    public String Hexadecimales(int decimal) {
        Scanner teclado = new Scanner(System.in);
        teclado.close();
        char digitosH[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        String hexadecimal2 = "";
        int resto, aux = decimal;
        while (aux > 0) {
            resto = aux % 16;
            hexadecimal2 = digitosH[resto] + hexadecimal2;
            aux /= 16;
        }
        System.out.printf("%n%nMétodo 2 -> Decimal: %d, Hexadecimal: %sh", decimal, hexadecimal2, "h");
        return hexadecimal2 + "h";

    }
    double duracion2 = ThreadLocalRandom.current().nextInt(5, 15 + 1);//Genera numeros entre 5 y 15

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SO = new javax.swing.JPanel();
        as1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablita = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        agregar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblReloj = new javax.swing.JLabel();
        correr = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        mitablita = new javax.swing.JTable();
        color = new javax.swing.JPanel();
        as = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txttemp = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        as1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout SOLayout = new javax.swing.GroupLayout(SO);
        SO.setLayout(SOLayout);
        SOLayout.setHorizontalGroup(
            SOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(as1, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
        );
        SOLayout.setVerticalGroup(
            SOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SOLayout.createSequentialGroup()
                .addComponent(as1, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 2, Short.MAX_VALUE))
        );

        getContentPane().add(SO, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 590, 260, 20));

        tablita = new javax.swing.JTable(){
            public boolean isCellEditable(int ro,int col ){
                return false;
            }
        };
        tablita.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        tablita.setFont(new java.awt.Font("DialogInput", 1, 16)); // NOI18N
        tablita.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tablita.setFocusable(false);
        tablita.setGridColor(new java.awt.Color(255, 255, 255));
        tablita.getTableHeader().setResizingAllowed(false);
        tablita.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tablita);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, 260, 290));

        jLabel1.setFont(new java.awt.Font("DialogInput", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 102));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("CONTROL DE PROCESOS --- ALGORITMO RR");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 890, 45));

        agregar.setBackground(new java.awt.Color(102, 102, 102));
        agregar.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        agregar.setForeground(new java.awt.Color(255, 255, 255));
        agregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/proceso.png"))); // NOI18N
        agregar.setText("AGREGAR");
        agregar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarActionPerformed(evt);
            }
        });
        getContentPane().add(agregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 380, 170, 90));

        jLabel4.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(204, 255, 255));
        jLabel4.setText("ejecutandose: ");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 280, 160, -1));

        jLabel5.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("D");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 270, 60, 50));

        lblReloj.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        lblReloj.setForeground(new java.awt.Color(0, 0, 0));
        lblReloj.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblReloj.setText("HORA");
        getContentPane().add(lblReloj, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 350, 250, -1));

        correr.setBackground(new java.awt.Color(0, 0, 0));
        correr.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        correr.setForeground(new java.awt.Color(255, 255, 255));
        correr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ejecucion (1).png"))); // NOI18N
        correr.setText("EJECUCION");
        correr.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        correr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                correrActionPerformed(evt);
            }
        });
        getContentPane().add(correr, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 490, 170, 90));

        mitablita.setBackground(new java.awt.Color(0, 0, 0));
        mitablita.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        mitablita.setForeground(new java.awt.Color(255, 255, 255));
        mitablita.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "Nombre", "Tamaño", "Tiempo Entrada", "Duracion", "Estado"
            }
        ));
        jScrollPane2.setViewportView(mitablita);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, 830, 170));

        as.setFont(new java.awt.Font("DialogInput", 1, 36)); // NOI18N
        as.setForeground(new java.awt.Color(0, 0, 0));
        as.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout colorLayout = new javax.swing.GroupLayout(color);
        color.setLayout(colorLayout);
        colorLayout.setHorizontalGroup(
            colorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(as, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
        );
        colorLayout.setVerticalGroup(
            colorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(as, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        getContentPane().add(color, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 240, 260, 60));

        txttemp.setEditable(false);
        txttemp.setBackground(new java.awt.Color(0, 0, 0));
        txttemp.setColumns(20);
        txttemp.setFont(new java.awt.Font("DialogInput", 1, 12)); // NOI18N
        txttemp.setForeground(new java.awt.Color(255, 255, 255));
        txttemp.setLineWrap(true);
        txttemp.setRows(5);
        txttemp.setWrapStyleWord(true);
        jScrollPane3.setViewportView(txttemp);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 270, 290, 340));

        jLabel3.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(204, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 380, 260, 45));

        jLabel6.setFont(new java.awt.Font("DialogInput", 1, 36)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(204, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("HISTORIAL");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 230, 240, 45));

        jLabel7.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(204, 255, 255));
        jLabel7.setText("Direccion de memoria");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 260, 240, -1));

        jLabel8.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(204, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Hora del sistema");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 320, 260, 45));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/low-poly-blue_a2ZpZmuUmZqaraWkpJRnamtlrWZrZWU.png"))); // NOI18N
        jLabel2.setText("jLabel2");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 890, 650));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    int posiproceso;
    int t = 450;

    // mi clase hilo algoritmo completo
    public class mihilo extends Thread {

        int posiciontabla = 0;
        int contadorprogres = 0;

        @Override
        public void run() {

            while (tamaño_lista > 0) {
                int cont = 0;
                Iterator<Nodo> itrNodo = lista.iterator();
                while (itrNodo.hasNext()) {
                    Nodo listado = itrNodo.next();
                    System.out.println("posciones de tabla " + posiciontabla);
                    if (listado.getDuracion() <= 10) {
                        histo += "Estado: Ejecutandose  " + "Proceso: " + listado.getNombre() + "\n";
                        txttemp.setText(histo);
                        int posiproceso = (int) (mitablita.getValueAt(listado.getPosi(), 0));
                        System.out.println("proce eliminado : " + listado.getNombre() + " cantidad " + listado.getDuracion());
                        for (int i = (int) listado.getDuracion(); i >= 0; i--) {
                            if (i == 0) {
                                try {
                                    mitablita.setValueAt("Termindo", posiproceso, 5);
                                    histo += "Estado: Saliente  " + "Proceso: " + listado.getNombre() + "\n";
                                    txttemp.setText(histo);
                                    color.setBackground(Color.GREEN);
                                    as.setText(listado.getNombre());
                                    mitablita.setValueAt(0, posiproceso, 4);
                                    Thread.sleep(t);
                                } catch (InterruptedException ex) {
                                    Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            } else {
                                try {
                                    System.out.println("Ejecutando......" + i);
//                                    pruebas.setText(listado.getDuracion() + "Ejecutando1........ " + i);

                                    color.setBackground(Color.RED);
                                    as.setText(listado.getNombre());
                                    System.out.println(posiproceso + " prestar atecion aquiiiiiiiiiiiiiiiiiiiiiii");
                                    mitablita.setValueAt(i, posiproceso, 4);
                                    mitablita.setValueAt("Ejecutando... ", posiproceso, 5);
                                    Thread.sleep(t);
                                } catch (InterruptedException ex) {
                                    Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }

                        itrNodo.remove();
                        tamaño_lista--;
                    } else if (listado.getDuracion() > 10) {
                        try {
                            System.out.println(listado.getDuracion() + "atencion ---------------------------------------------");
                            histo += "Estado: Ejecutandose  " + "Proceso: " + listado.getNombre() + "\n";
                            txttemp.setText(histo);
                            int posiproceso = (int) (mitablita.getValueAt(listado.getPosi(), 0));
                            for (int i = (int) listado.getDuracion(); i > listado.getDuracion() - 10; i--) {
                                try {
//                                pruebas.setText(listado.getDuracion() + " Ejecutando2........ " + i);
                                    color.setBackground(Color.RED);
                                    as.setText(listado.getNombre());
                                    mitablita.setValueAt(i, posiproceso, 4);
                                    mitablita.setValueAt("Ejecutando.... ", posiproceso, 5);

                                    Thread.sleep(t);
                                } catch (InterruptedException ex) {
                                    Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                            double duracio = (listado.getDuracion() - 10);
                            color.setBackground(Color.YELLOW);
                            as.setText(listado.getNombre());
                            histo += "Estado: Listo  " + "Proceso: " + listado.getNombre() + "\n";
                            txttemp.setText(histo);
                            mitablita.setValueAt("Listo ", posiproceso, 5);
                            listado.setDuracion(duracio);
                            Thread.sleep(400);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
                try {
                    Thread.sleep(t);
                } catch (InterruptedException ex) {
                    Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            agregar.setEnabled(true);
            as.setText("");
            color.setBackground(Color.WHITE);
            DefaultTableModel modelo = (DefaultTableModel) mitablita.getModel();
            int numDatos = modelo.getRowCount();
            for (int i = 0; i < numDatos; i++) {
                modelo.removeRow(0);
            }
            DefaultTableModel modelo2 = (DefaultTableModel) tablita.getModel();
            int numDatos2 = modelo2.getRowCount();
            for (int i = 0; i < numDatos2; i++) {
                modelo2.removeRow(0);
            }
            boolean[] x = {false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false};
            procesosTabla = x;
            jLabel5.setText("");
            color.setOpaque(false);
            contadorNombre = 0;

        }
    }

    public void datotabla(int posicion, String nombre, int tamaño, int tiempolle, int duracion, String estado) {
        DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
        tcr.setHorizontalAlignment(SwingConstants.CENTER);
        mitablita.getColumnModel().getColumn(0).setCellRenderer(tcr);
        mitablita.getColumnModel().getColumn(1).setCellRenderer(tcr);
        mitablita.getColumnModel().getColumn(2).setCellRenderer(tcr);
        mitablita.getColumnModel().getColumn(3).setCellRenderer(tcr);
        mitablita.getColumnModel().getColumn(4).setCellRenderer(tcr);
        mitablita.getColumnModel().getColumn(5).setCellRenderer(tcr);
        DefaultTableModel modelo = (DefaultTableModel) mitablita.getModel();
        Object[] fila = new Object[6];
        fila[0] = posicion;
        fila[1] = nombre;
        fila[2] = tamaño;
        fila[3] = tiempolle;
        fila[4] = duracion;
        fila[5] = estado;
        modelo.addRow(fila);
        mitablita.setModel(modelo);

    }

    // metodos de la lista
    public void insertar(String nombre, int tamanio, int tiempo_llegada, int duracion) {
        lista.add(new Nodo(tamaño_lista, nombre, tamanio, tiempo_llegada, duracion));
        datotabla(tamaño_lista, nombre, tamanio, tiempo_llegada, duracion, "Nuevo");
        tamaño_lista++;
    }

    public void mostra() {
        Iterator<Nodo> itrPartidos = lista.iterator();
        while (itrPartidos.hasNext()) {
            Nodo partido = itrPartidos.next();
            System.out.println(partido.getNombre() + " - "
                    + partido.getDuracion() + ""
            );
        }
    }

    public void eliminar(int pos) {
        Iterator<Nodo> itrnodo = lista.iterator();
        while (itrnodo.hasNext()) {
            Nodo listado = itrnodo.next();
            if (listado.getPosi() == pos) {
                System.out.println("encontrado " + listado.getPosi());
                lista.remove(pos);
            }
        }
    }

    public Nodo existe(int pos) {
        Nodo x = null;
        Iterator<Nodo> itrnodo = lista.iterator();
        while (itrnodo.hasNext()) {
            Nodo listado = itrnodo.next();
            if (listado.getPosi() == pos) {
                System.out.println("encontrado " + listado.getPosi());
                x = listado;
            }
        }
        return x;
    }

    String histo = "";
    boolean estadobont = true;
    private void agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarActionPerformed

        agregar.setEnabled(false);
        correr.setEnabled(false);
        Random rand = new Random();
        tiempo_llegada = Integer.parseInt(segundos);
        int randInt = rand.nextInt(63); //Genera numeros de 0 a 65535 que es nuestro espacio disponible
        Procesos procesoAux = new Procesos("aux", 0, 0, 0, 0);//ignorarlo solo lo uso para usar una funcion
        int guiaParaAsignarEspacios = procesoAux.saberBloquesAUtilizar(randInt);//me indica cuantos bloques de memoria debo buscar
        bloque = guiaParaAsignarEspacios;
        boolean asignar = true;
        int contador = 0;
        int PosA = 0;
        int PosB = 0;

        for (int i = 0; i < 16; i++) {
            if (contador != guiaParaAsignarEspacios) {
                System.out.println("contador es " + contador);
                if (procesosTabla[i] == false) {//hay espacio libre para asignar
                    if (contador == 0) {//sera la posicion inicial del documento
                        PosA = i;
                        System.out.println("La posicion inicial es " + PosA);

                    }
                    if (contador == guiaParaAsignarEspacios - 1) {
                        PosB = i;
                        System.out.println("La posicion final es " + PosB);
                    }
                    procesosTabla[i] = true;//esto significa que esos espacios de la memoria estan llenos
                    contador++;

                } else {//encontro espacios asignados
                    contador = 0;
                }
                System.out.println("Voy en i " + i + "  " + procesosTabla[i]);
            }
        }
        if (PosB != 0) {//significa que encontro posiciones libres
            Procesos process = new Procesos("P" + this.contadorNombre, randInt, PosA, PosB, 10);
            this.contadorNombre++;
            int duracion_limite = (int) (Math.random() * (16 - 5)) + 5;
            insertar(process.getNombre(), process.getBloques(), tiempo_llegada, duracion_limite);
            histo += "Estado: Nuevo  " + "Proceso: " + process.getNombre() + "\n";
            txttemp.setText(histo);
            System.out.println("agregando datos ......................");
            jLabel5.setText(String.valueOf(randInt));
            Procesos.add(process);//voy añadiendo los procesos conforme le van dando click
            insertar++;
            contadorDeListaProcesos++;//aqui podriamos cambiar y mandarle otro numero
            posI = PosA;
            posF = PosB;
            System.out.println("posI" + posI);
            System.out.println("posF" + posF);

        } else {
            JOptionPane.showMessageDialog(null, "Memoria llena");
            correr.setEnabled(true);
            agregar.setEnabled(true);
        }

    }//GEN-LAST:event_agregarActionPerformed
    public void Revibir() {

    }
    private void correrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_correrActionPerformed
        agregar.setEnabled(false);
        color.setOpaque(true);
        mihilo hilo = new mihilo();
        hilo.start();

    }//GEN-LAST:event_correrActionPerformed

    @Override
    public void run() {
        Thread ct = Thread.currentThread();
        while (ct == h1) {
            calcula();
            lblReloj.setText(hora + ":" + minutos + ":" + segundos + " " + ampm);
            System.out.println("inicamos hora");
            //
            try {
                Thread.sleep(1000);

            } catch (InterruptedException ex) {
                Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void calcula() {
        Calendar calendario = new GregorianCalendar();
        Date fechaHoraActual = new Date();

        calendario.setTime(fechaHoraActual);
        ampm = calendario.get(Calendar.AM_PM) == Calendar.AM ? "AM" : "PM";
        if (ampm.equals("PM")) {
            int h = calendario.get(Calendar.HOUR_OF_DAY) - 12;
            hora = h > 9 ? "" + h : "0" + h;

        } else {
            hora = calendario.get(Calendar.HOUR_OF_DAY) > 9 ? "" + calendario.get(Calendar.HOUR_OF_DAY) : "0" + calendario.get(Calendar.HOUR_OF_DAY);
        }
        minutos = calendario.get(Calendar.MINUTE) > 9 ? "" + calendario.get(Calendar.MINUTE) : "0" + calendario.get(Calendar.MINUTE);
        segundos = calendario.get(Calendar.SECOND) > 9 ? "" + calendario.get(Calendar.SECOND) : "0" + calendario.get(Calendar.SECOND);
    }

    public void settamanioBloques(int cantbloque) {
        if (cantbloque > 16) {
            JOptionPane.showMessageDialog(null, "Supera nuestra capaci dad para almacenar");
        } else {
            this.tamañobloque = (int) Math.pow(2, cantbloque) - 1;
            System.out.println("Capacidad" + tamañobloque);
        }
    }

    //funcion para obtener la direccion 
    public String ObtenerInstruccion(int posi) {
        ArrayList<String> binario = new ArrayList<String>();
        int resto;
        String binarioString = "";
        do {
            resto = posi % 2;
            posi = posi / 2;
            binario.add(0, Integer.toString(resto));
        } while (posi > 2);
        binario.add(0, Integer.toString(posi));
        for (int i = 0; i < binario.size(); i++) {
            binarioString += binario.get(i);
            System.out.println("");
        }
        return binarioString;
    }

    public class verificarProcesos extends Thread {//sirve para ver si se dibuja o no 

        DefaultTableModel tables = new DefaultTableModel();

        public verificarProcesos() {
            tables.addColumn("Direccion");
            tables.addColumn("Tamaño");
            tables.addColumn("Instruccion");
        }

        @Override
        public void run() {//aqui dibujaremos
            while (true) {
                DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
                tcr.setHorizontalAlignment(SwingConstants.CENTER);

                System.out.println("toca insertar?" + insertar);
                System.out.println(Procesos.size());
                if (insertar == 1) {//hay procesos que meter en nuestro sistema
                    String tamaño;
                    int Direccion;
                    String instruccion;
                    String[] datos = new String[4];
                    int bloqueAnterior = tablita.getRowCount();
                    if (Procesos.get(contadorDeListaProcesos).getBloques() != 0) {
                        System.out.println("Dibujar");
                        if (Procesos.get(contadorDeListaProcesos).getBloques() == 1) {
                            if (bloqueAnterior > 0) {
                                System.out.println("simon");
                                System.out.println(bloque);
                                System.out.println("bloqueAnterior****" + bloqueAnterior);

                                settamanioBloques(bloqueAnterior + 1);
                                tamaño = Hexadecimales(tamañobloque);
                                instruccion = ObtenerInstruccion(posF);

                            } else {
                                System.out.println("también");
                                settamanioBloques(bloque);
                                tamaño = Hexadecimales(tamañobloque);
                                instruccion = ObtenerInstruccion(posF);
                            }
                            datos[0] = String.valueOf(posF);
                            datos[1] = tamaño;
                            datos[2] = instruccion;

                        } else if (Procesos.get(contadorDeListaProcesos).getBloques() == bloque) {
                            System.out.println("si entra");
                            if (bloqueAnterior/*Ve  las filas totales ocupadas*/ > 0) {
                                settamanioBloques(1 + bloqueAnterior);// bloque disponible
                                tamaño = Hexadecimales(tamañobloque);
                                instruccion = ObtenerInstruccion(posI);
                                System.out.println("bloqueAnterior----" + bloqueAnterior);
                                System.out.println("TAMAÑO" + tamañobloque);
                                System.out.println("tamañoooo" + tamaño);
                                System.out.println("HAY BLOQUE ANTERIOR");
                            } else {
                                System.out.println("kpex");
                                settamanioBloques(0);
                                tamaño = Hexadecimales(tamañobloque);
                                instruccion = ObtenerInstruccion(posI);
                                System.out.println("tamaño" + tamañobloque);
                                System.out.println("NO HAY ");
                            }
                            datos[0] = String.valueOf(posI);
                            datos[1] = tamaño;
                            datos[2] = instruccion;
                        } else if (Procesos.get(contadorDeListaProcesos).getBloques() <= bloque) {

                        }

                        datos[3] = " ";

                        tables.addRow(datos);
                        Procesos.get(contadorDeListaProcesos).setBloques(Procesos.get(contadorDeListaProcesos).getBloques() - 1);
                    } else {
                        insertar = 0;//dejo de insertar

                        agregar.setEnabled(true);
                        correr.setEnabled(true);

                    }

                    tablita.setModel(tables);
                    //centramos datos de una tabla
                    tablita.getColumnModel().getColumn(0).setCellRenderer(tcr);
                    tablita.getColumnModel().getColumn(1).setCellRenderer(tcr);
                    tablita.getColumnModel().getColumn(2).setCellRenderer(tcr);
                }
                try {
                    Thread.sleep(t);//revisaremos a cada cierto tiempo
                } catch (InterruptedException ex) {
                    System.out.println("Error en el hilo de dibujo");
                }
            }

        }

    }

    //pasar la direccion a Hexadecimal
    public String DireccionHexadecimal(int decimal) {
        Scanner teclado = new Scanner(System.in);
        teclado.close();
        char digitosH[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        String hexadecimal2 = "";
        int resto, aux = decimal;
        while (aux > 0) {
            resto = aux % 16;
            hexadecimal2 = digitosH[resto] + hexadecimal2;
            aux /= 16;
        }
        return hexadecimal2 + "h";
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel SO;
    private javax.swing.JButton agregar;
    private javax.swing.JLabel as;
    private javax.swing.JLabel as1;
    private javax.swing.JPanel color;
    private javax.swing.JButton correr;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblReloj;
    private javax.swing.JTable mitablita;
    private javax.swing.JTable tablita;
    private javax.swing.JTextArea txttemp;
    // End of variables declaration//GEN-END:variables
}
